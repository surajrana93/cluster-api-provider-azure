/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: ../ttllru.go

// Package mock_ttllru is a generated GoMock package.
package mock_ttllru

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockcacher is a mock of cacher interface.
type Mockcacher struct {
	ctrl     *gomock.Controller
	recorder *MockcacherMockRecorder
}

// MockcacherMockRecorder is the mock recorder for Mockcacher.
type MockcacherMockRecorder struct {
	mock *Mockcacher
}

// NewMockcacher creates a new mock instance.
func NewMockcacher(ctrl *gomock.Controller) *Mockcacher {
	mock := &Mockcacher{ctrl: ctrl}
	mock.recorder = &MockcacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcacher) EXPECT() *MockcacherMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *Mockcacher) Get(key interface{}) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockcacherMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockcacher)(nil).Get), key)
}

// Add mocks base method.
func (m *Mockcacher) Add(key, value interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", key, value)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockcacherMockRecorder) Add(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*Mockcacher)(nil).Add), key, value)
}

// Remove mocks base method.
func (m *Mockcacher) Remove(key interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockcacherMockRecorder) Remove(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*Mockcacher)(nil).Remove), key)
}
